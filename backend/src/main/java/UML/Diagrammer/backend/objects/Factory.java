/* THIS CLASS HAS BEEN DEPRECIATED AND WILL NOW BE SEPARATED INTO FACTORIES FOR DIFFERENT OBJECTS.
SEE NodeFactory.java FOR WHAT THAT LOOKS LIKE
 */

/*package UML.Diagrammer.backend.objects;
import lombok.Getter;
import lombok.Setter;*/

/**
 * Class to create the backend objects for the UI.
 * The UI must keep a Factory object to create node/edge/graph objects.
 * @author Alex, Show
 */
/*public class Factory {

    public Factory(){}

    public DefaultNode createSmallDefaultNode(String name, int xCoord, int yCoord){

            int width = 2;
            int height = 2;
            String description = "Small Node of name: "+name + " Generated By Factory. Width is: "+width +" and height is: "+ height;
            return new DefaultNode(name,description,xCoord,yCoord,2,2);
    }*/

    // Future thought, maybe we should specify a shape, so when we create a specific UML object we can associate it with
    // the SVG file that we need to display to the UI.
    /**
     * Constructs a new node object for the UI to display to the screen.
     * @return a DefaultNode object
     */
    /*public DefaultNode createGenericNode(String name, int xCoord, int yCoord){
        if (name == null){ name = "New object";}
        String desc = "input a description";
        int width = 2;
        int height = 2;
        return new DefaultNode(name, desc, xCoord, yCoord, width, height);
    }*/

/**
     * Overload the function, so you can call createGenericNode() without specifying a name.
     * This is so we can make a node and specify that this should
     * be a "class", "user", "object" UML shape in the UI.
     * Basically an auto-populate from the user's point of view, so the don't have to rename every object
     */
    /*public DefaultNode createGenericNode(int xCoord, int yCoord){
        return createGenericNode(null, xCoord, yCoord);
    }

}*/