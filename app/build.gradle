import com.hierynomus.gradle.license.LicenseReportingPlugin

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    //Project Lombok
    id "io.freefair.lombok" version "6.4.1"

    //Javafx plugin for use of JavaFX and FXML
    id 'org.openjfx.javafxplugin' version '0.0.12'

    // ActiveJDBC
    id "java"
    //Griffith ActiveJDBC plugin
    id "com.empirilytics.activejdbc-gradle-plugin" version "3.0-j11"

    id 'jacoco'

    id "com.github.hierynomus.license" version "0.16.1"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    // use javalin for front end web
    implementation 'io.javalin:javalin:4.3.0'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation 'com.google.code.gson:gson:2.9.0'

    implementation group: 'io.javalin', name: 'javalin', version: '4.3.0'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.31'
    

    implementation project(":backend") //Lets us use our backend objects.

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
    //mockito
    testImplementation "org.mockito:mockito-core:3.+"

    
    compileOnly 'org.javalite:activejdbc:1.4.1'
    compileOnly 'org.javalite:activejdbc-instrumentation:1.4.1'
    // Batik for svg conversion
    implementation "org.apache.xmlgraphics:batik-transcoder:1.14"
    //Active JDBC javalite
    implementation group: 'org.javalite', name: 'activejdbc', version: '2.3.2-j8'

    //Active JDBC Mysql
    runtimeOnly group: 'mysql', name: 'mysql-connector-java', version: '8.0.13'

    //testfx
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'

    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'

    testImplementation group: 'org.testfx', name: 'testfx-junit5', version: '4.0.16-alpha'


    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'

    testImplementation "org.testfx:testfx-core:4.0.16-alpha"

    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.1'

}

// license checker rules
license {
    header rootProject.file('LICENSE')
    excludes(["**/*.png", "**/*.svg", "**/*.fxml", "**/*.css", "**/*Test.java"])
    include("**/*.java")
    ignoreFailures true
    skipExistingHeaders true

    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

application {
    // Define the main class for the application.
    mainClass = 'UML.Diagrammer.desktop.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

javafx {
    version = "17"
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.swing', 'javafx.graphics', 'javafx.base']
}


test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

